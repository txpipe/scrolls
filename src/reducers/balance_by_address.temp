use gasket::error::AsWorkError;
use pallas::crypto::hash::Hash;
use pallas::ledger::primitives::{alonzo, byron};
use serde::Deserialize;

use crate::{crosscut, model, storage};

#[derive(Deserialize)]
pub struct Config {
    pub key_prefix: Option<String>,
    pub filter: Option<Vec<String>>,
}

pub struct Reducer {
    config: Config,
    address_hrp: String,
}

impl Reducer {
    fn send_increment(
        &mut self,
        slot: u64,
        address: &str,
        value: i64,
        output: &mut super::OutputPort,
    ) -> Result<(), gasket::error::Error> {
        let key = match &self.config.key_prefix {
            Some(prefix) => format!("{}.{}", prefix, address),
            None => format!("{}", address),
        };

        let crdt = model::CRDTCommand::LastWriteWins(key, address.to_string(), slot);

        output.send(gasket::messaging::Message::from(crdt))?;

        Ok(())
    }

    fn reduce_alonzo_compatible_tx(
        &mut self,
        slot: u64,
        tx: &alonzo::TransactionBody,
        state: &mut storage::ReadPlugin,
        output: &mut super::OutputPort,
    ) -> Result<(), gasket::error::Error> {
        let tx_hash = tx.to_hash();

        tx.iter()
            .filter_map(|b| match b {
                alonzo::TransactionBodyComponent::Outputs(o) => Some(o),
                _ => None,
            })
            .flat_map(|o| o.iter())
            .enumerate()
            .map(move |(tx_idx, tx_output)| {
                let address = tx_output
                    .to_bech32_address(&self.address_hrp)
                    .or_work_err()?;
                self.send_increment(slot, &address, 1, output)
            })
            .collect();

        tx.iter()
            .filter_map(|b| match b {
                alonzo::TransactionBodyComponent::Inputs(i) => Some(i),
                _ => None,
            })
            .flat_map(|i| i.iter())
            .map(move |tx_input| {
                let txo = format!("{}#{}", tx_input.transaction_id, tx_input.index);
                let address = state.read_state(model::StateQuery::KeyValue(txo))?;
                self.send_increment(slot, &address, -1, output)
            })
            .collect();

        Ok(())
    }

    pub fn reduce_block(
        &mut self,
        block: &model::MultiEraBlock,
        state: &mut storage::ReadPlugin,
        output: &mut super::OutputPort,
    ) -> Result<(), gasket::error::Error> {
        match block {
            model::MultiEraBlock::AlonzoCompatible(x) => x
                .1
                .transaction_bodies
                .iter()
                .map(|tx| {
                    self.reduce_alonzo_compatible_tx(x.1.header.header_body.slot, tx, state, output)
                })
                .collect(),
            _ => Ok(()),
        }
    }
}

impl Config {
    pub fn plugin(self, chain: &crosscut::ChainWellKnownInfo) -> super::Reducer {
        let reducer = Reducer {
            config: self,
            address_hrp: chain.address_hrp.clone(),
        };

        super::Reducer::BalanceByAddress(reducer)
    }
}
